{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import{useSelector}from'react-redux';import{selectUser}from'../features/userSlice';import db from'../firebase';import'./PlanScreen.css';import{loadStripe}from'@stripe/stripe-js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function PlanScreen(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),products=_useState2[0],setProducts=_useState2[1];var user=useSelector(selectUser);/* To retrieve the subscription data of the user */var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),subscription=_useState4[0],setSubscription=_useState4[1];useEffect(function(){db.collection(\"customers\").doc(user.uid).collection('subscriptions').get().then(function(querySnapshot){/* querySnapshot represents the result of a query */ /* loop through forEach subscriptions and retrieve the role attribute, current period start and end */querySnapshot.forEach(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(subscription){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:setSubscription({role:subscription.data().role,current_period_end:subscription.data().current_period_end.seconds,current_period_start:subscription.data().current_period_start.seconds});case 1:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}());});},[]);/* fetch the plans from the database */ /* The documents can be accessed as an array via the docs property or enumerated using the forEach method.  */ /* https://console.firebase.google.com/project/netflix2-clone-e95d8/firestore/data~2Fproducts~2Fprod_JT3hRI7rwmgJfh */ /* The 'products' and 'active' attribute is displayed in the link above */useEffect(function(){db.collection('products').where('active','==',true).get().then(function(querySnapshot){var products={};querySnapshot.forEach(/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(productDoc){var priceSnap;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:products[productDoc.id]=productDoc.data();_context2.next=3;return productDoc.ref.collection('prices').get();case 3:priceSnap=_context2.sent;priceSnap.docs.forEach(function(price){products[productDoc.id].prices={priceId:price.id,priceData:price.data()};});case 5:case\"end\":return _context2.stop();}}},_callee2);}));return function(_x2){return _ref2.apply(this,arguments);};}());setProducts(products);});},[]);console.log(\"The products are: \",products);/* Returns an object */console.log(\"Subscription is: \",subscription);/* function to render the checkout/paying screen */var loadCheckout=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(priceId){var docRef;return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.next=2;return db.collection('customers').doc(user.uid).collection(\"checkout_sessions\").add({price:priceId,success_url:window.location.origin,cancel_url:window.location.origin});case 2:docRef=_context4.sent;docRef.onSnapshot(/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(snap){var _snap$data,error,sessionId,strip;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_snap$data=snap.data(),error=_snap$data.error,sessionId=_snap$data.sessionId;if(error){//show an error to your customer and inspect your Cloud Function logs in the Firebase console\nalert(\"An error occured: \".concat(error.message));}if(!sessionId){_context3.next=7;break;}_context3.next=5;return loadStripe('pk_test_51IpNyNFws4ncZVjIE5PzlqMhXPP780p2H9hetmUSWL48bAnpSxUwzAmikcBNhORCyfolUWnt8dAs4gvlMEvKY6IJ00IUI0r1Gh');case 5:strip=_context3.sent;strip.redirectToCheckout({sessionId:sessionId});case 7:case\"end\":return _context3.stop();}}},_callee3);}));return function(_x4){return _ref4.apply(this,arguments);};}());case 4:case\"end\":return _context4.stop();}}},_callee4);}));return function loadCheckout(_x3){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"planScreen\",children:[/*#__PURE__*/_jsx(\"br\",{}),subscription&&/*#__PURE__*/_jsxs(\"p\",{children:[\"Renewal data: \",\" \",new Date((subscription===null||subscription===void 0?void 0:subscription.current_period_end)*1000).toLocaleDateString()]}),Object.entries(products).map(function(_ref5){var _ref6=_slicedToArray(_ref5,2),productId=_ref6[0],productData=_ref6[1];//Add some logic to check if the user's subscription is active\nvar isCurrentPackage=productData.name.includes(subscription===null||subscription===void 0?void 0:subscription.role);return/*#__PURE__*/_jsxs(\"div\",{//if isCurrentPackage then i want to add on the \"planScreen_plan--disabled\" className \nclassName:\"\".concat(isCurrentPackage&&\"planScreen__plan--disabled\",\" planScreen__plan\"),children:[/*#__PURE__*/_jsxs(\"div\",{className:\"planScreen__info\",children:[/*#__PURE__*/_jsx(\"h5\",{children:productData.name}),/*#__PURE__*/_jsx(\"h6\",{children:productData.description})]}),/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return!isCurrentPackage&&loadCheckout(productData.prices.priceId);},children:isCurrentPackage?'Current Package':'Subscribe'})]},productId);})]});}export default PlanScreen;","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/netflix-clone/src/screens/PlanScreen.js"],"names":["React","useEffect","useState","useSelector","selectUser","db","loadStripe","PlanScreen","products","setProducts","user","subscription","setSubscription","collection","doc","uid","get","then","querySnapshot","forEach","role","data","current_period_end","seconds","current_period_start","where","productDoc","id","ref","priceSnap","docs","price","prices","priceId","priceData","console","log","loadCheckout","add","success_url","window","location","origin","cancel_url","docRef","onSnapshot","snap","error","sessionId","alert","message","strip","redirectToCheckout","Date","toLocaleDateString","Object","entries","map","productId","productData","isCurrentPackage","name","includes","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { useSelector } from 'react-redux'\nimport { selectUser } from '../features/userSlice'\nimport db from '../firebase'\nimport './PlanScreen.css'\nimport {loadStripe} from '@stripe/stripe-js'\n\nfunction PlanScreen() {\n\n  const [products, setProducts] = useState([])\n  const user = useSelector(selectUser)\n\n  /* To retrieve the subscription data of the user */\n  const [subscription, setSubscription] = useState(null)\n\n  useEffect(()=> {\n      db.collection(\"customers\")\n        .doc(user.uid)\n        .collection('subscriptions')\n        .get()\n        .then(querySnapshot => {\n\n          /* querySnapshot represents the result of a query */\n          /* loop through forEach subscriptions and retrieve the role attribute, current period start and end */\n          querySnapshot.forEach( async subscription => {\n            setSubscription({\n              role: subscription.data().role,\n              current_period_end: subscription.data().current_period_end.seconds,\n              current_period_start: subscription.data().current_period_start.seconds,\n            });\n          });\n        });\n  }, [])\n\n  /* fetch the plans from the database */\n  /* The documents can be accessed as an array via the docs property or enumerated using the forEach method.  */\n  /* https://console.firebase.google.com/project/netflix2-clone-e95d8/firestore/data~2Fproducts~2Fprod_JT3hRI7rwmgJfh */\n  /* The 'products' and 'active' attribute is displayed in the link above */\n  useEffect(() => {\n        db.collection('products')\n        .where('active', '==', true)\n        .get()\n        .then((querySnapshot) => {\n          const products = {};\n          querySnapshot.forEach(async (productDoc) => {\n            products[productDoc.id] = productDoc.data();\n            const priceSnap = await productDoc.ref.collection('prices').get();\n            priceSnap.docs.forEach((price) => {\n              products[productDoc.id].prices = {\n                priceId: price.id,\n                priceData: price.data(),\n              };\n            });\n          });\n          setProducts(products);\n        });\n  },[]);\n\n  console.log(\"The products are: \", products) /* Returns an object */\n  console.log(\"Subscription is: \", subscription)\n\n  /* function to render the checkout/paying screen */\n  const loadCheckout = async (priceId) => {\n    //pulling the user from the redux store\n    const docRef = await db\n      .collection('customers')\n      .doc(user.uid)\n      .collection(\"checkout_sessions\")\n      .add({\n        price: priceId,\n        success_url: window.location.origin,\n        cancel_url: window.location.origin,\n      })\n\n      docRef.onSnapshot(async(snap) => {\n        const {error, sessionId} = snap.data();\n\n        if (error){\n          //show an error to your customer and inspect your Cloud Function logs in the Firebase console\n          alert(`An error occured: ${error.message}`)\n        }\n\n        if (sessionId){\n          //We have a session, lets redirect to Checkout\n          //Initialise stripe\n\n          const strip = await loadStripe('pk_test_51IpNyNFws4ncZVjIE5PzlqMhXPP780p2H9hetmUSWL48bAnpSxUwzAmikcBNhORCyfolUWnt8dAs4gvlMEvKY6IJ00IUI0r1Gh');\n          strip.redirectToCheckout({sessionId});\n        }\n      });\n  };\n\n  return (\n    <div className=\"planScreen\">\n\n      {/* Renewal date */}\n      {/* We only want to render the renewal date if we have the subscriptiond data */}\n      <br></br>\n      {subscription && (\n        <p>\n          Renewal data: {\" \"}\n          {new Date(\n            subscription?.current_period_end * 1000\n          ).toLocaleDateString()}\n        </p>\n      )}\n\n      {/* Need to map through an object */}\n      {/* Object.entries() will return a key-value pair in an array */}\n      {/* ​Object.keys(objectName).map( key => (<div>objectName[key]</div>)) */}\n      {Object.entries(products).map(([productId, productData]) => {\n        //Add some logic to check if the user's subscription is active\n        const isCurrentPackage = productData.name\n          .includes(subscription?.role);\n\n        return (\n          <div \n          key={productId}\n\n          //if isCurrentPackage then i want to add on the \"planScreen_plan--disabled\" className \n          className={`${\n            isCurrentPackage && \"planScreen__plan--disabled\"\n            } planScreen__plan`}>\n            <div className=\"planScreen__info\">\n              <h5>{productData.name}</h5>\n              <h6>{productData.description}</h6>\n            </div>\n\n            {/* Only trigger the loadCheckout if its not the current package cuz you dw to keep subscribing */}\n            <button onClick={() => \n              !isCurrentPackage && loadCheckout(productData.prices.priceId)}>\n              {isCurrentPackage ? 'Current Package' : 'Subscribe'}\n            </button>\n          </div>\n        )\n      })}\n      \n    </div>\n  )\n}\n\nexport default PlanScreen\n"]},"metadata":{},"sourceType":"module"}