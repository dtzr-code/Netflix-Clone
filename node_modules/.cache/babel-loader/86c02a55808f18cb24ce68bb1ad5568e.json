{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Derrick\\\\Github\\\\netflix-clone\\\\src\\\\components\\\\SearchRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./Row.css\";\nimport axios from '../axios';\nimport YouTube from 'react-youtube';\n/* npm install --save youtube-api */\n\nimport { API_KEY } from '../Requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchRow({\n  title,\n  fetchUrl,\n  isLargeRow = false\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const base_url = 'https://image.tmdb.org/t/p/original'; //useEffect dependent on the variable fetchUrl\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  /* To show the trailers */\n\n  const opts = {\n    height: \"500\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  /* When the user clicked on the picture */\n\n  const handleClick = async movie => {\n    {\n      /* if the video is already open, close it by setting the setTrailerUrl to empty */\n    }\n\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      var _trailerurl$data$resu;\n\n      let trailerurl = await axios.get(`/movie/${movie.id}/videos?api_key=${API_KEY}`);\n      console.log(trailerurl);\n      setTrailerUrl((_trailerurl$data$resu = trailerurl.data.results[0]) === null || _trailerurl$data$resu === void 0 ? void 0 : _trailerurl$data$resu.key);\n      /* To get the value of the id key*/\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"searchrow\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"searchrow__posters\",\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: \"searchrow__poster\",\n        src: `${base_url}${movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchRow, \"zcdNe0Lr8rip4Oj/qSSLGY8Tl3o=\");\n\n_c = SearchRow;\nexport default SearchRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchRow\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Derrick/Github/netflix-clone/src/components/SearchRow.js"],"names":["React","useEffect","useState","axios","YouTube","API_KEY","SearchRow","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","base_url","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","trailerurl","id","console","log","key","map","backdrop_path","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAAqC;;AACrC,SAAQC,OAAR,QAAsB,aAAtB;;;AAEA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAT;AAAmBC,EAAAA,UAAU,GAAG;AAAhC,CAAnB,EAA2D;AAAA;;AAEzD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAMY,QAAQ,GAAG,qCAAjB,CALyD,CAOzD;;AACAb,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAec,SAAf,GAA0B;AACxB,YAAMC,OAAO,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUT,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACK,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACP,QAAD,CAPM,CAAT;AASA;;AACA,QAAMY,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHD,GAAb;AAQA;;AACA,QAAMC,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACnC;AAAC;AAAmF;;AACpF,QAAId,UAAJ,EAAgB;AACdC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEO;AAAA;;AACL,UAAIc,UAAU,GAAG,MAAMxB,KAAK,CAACc,GAAN,CACpB,UAASS,KAAK,CAACE,EAAG,mBAAkBvB,OAAQ,EADxB,CAAvB;AAGAwB,MAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;AACAd,MAAAA,aAAa,0BAACc,UAAU,CAACT,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,0DAAC,sBAA4BY,GAA7B,CAAb;AAAiD;AAClD;AACF,GAXD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACE;AAAA,gBAAKxB;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,gBACGG,MAAM,CAACsB,GAAP,CAAYN,KAAD,iBACR;AACI,QAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CAD5B;AAEI,QAAA,SAAS,EAAC,mBAFd;AAII,QAAA,GAAG,EAAG,GAAEZ,QAAS,GAAEY,KAAK,CAACO,aAAc,EAJ3C;AAKI,QAAA,GAAG,EAAEP,KAAK,CAACQ;AALf,SAGWR,KAAK,CAACE,EAHjB;AAAA;AAAA;AAAA;AAAA,cADH;AADH;AAAA;AAAA;AAAA;AAAA,YAHF,EAiBGhB,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEQ;AAApC;AAAA;AAAA;AAAA;AAAA,YAjBjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD;;GA9DQd,S;;KAAAA,S;AAgET,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport \"./Row.css\"\r\nimport axios from '../axios'\r\nimport YouTube from 'react-youtube'; /* npm install --save youtube-api */\r\nimport {API_KEY} from '../Requests'\r\n\r\nfunction SearchRow({ title, fetchUrl, isLargeRow = false}) {\r\n\r\n  const [movies, setMovies] = useState([]);\r\n  const [trailerUrl, setTrailerUrl] = useState('');\r\n\r\n  const base_url = 'https://image.tmdb.org/t/p/original';\r\n\r\n  //useEffect dependent on the variable fetchUrl\r\n  useEffect(() => {\r\n    async function fetchData(){\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl])\r\n\r\n  /* To show the trailers */\r\n  const opts = {\r\n    height: \"500\",\r\n    width: \"100%\",\r\n    playerVars: {\r\n        autoplay: 1,\r\n    }\r\n  }\r\n\r\n  /* When the user clicked on the picture */\r\n  const handleClick = async (movie) => {\r\n    {/* if the video is already open, close it by setting the setTrailerUrl to empty */}\r\n    if (trailerUrl) {\r\n      setTrailerUrl(\"\");\r\n    } else {\r\n      let trailerurl = await axios.get(\r\n        `/movie/${movie.id}/videos?api_key=${API_KEY}`\r\n      );\r\n      console.log(trailerurl);\r\n      setTrailerUrl(trailerurl.data.results[0]?.key);  /* To get the value of the id key*/\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"searchrow\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"searchrow__posters\">\r\n        {movies.map((movie) => (\r\n            <img \r\n                onClick={()=>handleClick(movie)}\r\n                className=\"searchrow__poster\"\r\n                key = {movie.id}\r\n                src={`${base_url}${movie.backdrop_path}`} \r\n                alt={movie.name}\r\n          />\r\n          )\r\n        )}\r\n      </div>\r\n      \r\n      {/* Only when trailerUrl exists then play youtube video */}\r\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default SearchRow\r\n"]},"metadata":{},"sourceType":"module"}