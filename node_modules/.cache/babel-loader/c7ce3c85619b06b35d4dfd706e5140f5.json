{"ast":null,"code":"var _jsxFileName = \"/Users/dtzr/Documents/GitHub/netflix-clone/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport LoginScreen from './screens/LoginScreen';\nimport db, { auth } from './firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './screens/ProfileScreen';\nimport Watching from './screens/Watching';\nimport ManageProfiles from './screens/ManageProfiles';\nimport SignUpScreen from './screens/SignUpScreen';\nimport SignInScreen from './screens/SignInScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch(); //For logging in and logging out\n  //Need for the retention of logged in info\n\n  useEffect(() => {\n    //acts like a listerner so it listens to any authenticated state change\n    //if log in and refresh, it will store it to your local memory\n    const unsubscribe = auth.onAuthStateChanged(userAuth => {\n      if (userAuth) {\n        //logged in\n        dispatch(login({\n          uid: userAuth.uid,\n          email: userAuth.email\n        }));\n      } else {\n        //logged out\n        dispatch(logout());\n      }\n    }); //cleaning up\n    //if the component was to unmount, we don't want to duplicate another listerner\n\n    return unsubscribe;\n  }, [dispatch, auth]);\n  /* For checking if user has subscribed to a plan */\n\n  /* Only when user has subscribed to a plan, then render the movies */\n\n  const [plan, setPlan] = useState();\n  const currentUser = auth.currentUser;\n\n  if (currentUser) {\n    db.collection('customers').doc(user.uid).collection('subscriptions').get().then(querySnapshot => {\n      if (!querySnapshot.empty) {\n        setPlan(true);\n      } else {\n        setPlan(false);\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      forceRefresh: true,\n      children: !user ? /*#__PURE__*/_jsxDEV(LoginScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this) : !plan ? /*#__PURE__*/_jsxDEV(ProfileScreen, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/\",\n          children: /*#__PURE__*/_jsxDEV(Watching, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/home\",\n          children: /*#__PURE__*/_jsxDEV(HomeScreen, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/profile\",\n          children: /*#__PURE__*/_jsxDEV(ProfileScreen, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/signin\",\n          children: /*#__PURE__*/_jsxDEV(SignInScreen, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/signup\",\n          children: /*#__PURE__*/_jsxDEV(SignUpScreen, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          exact: true,\n          path: \"/ManageProfiles\",\n          children: /*#__PURE__*/_jsxDEV(ManageProfiles, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"Zydl8kd/rBrd4Ep9MWswhFZkOnA=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/netflix-clone/src/App.js"],"names":["React","useEffect","useState","HomeScreen","BrowserRouter","Router","Switch","Route","LoginScreen","db","auth","useDispatch","useSelector","login","logout","selectUser","ProfileScreen","Watching","ManageProfiles","SignUpScreen","SignInScreen","App","user","dispatch","unsubscribe","onAuthStateChanged","userAuth","uid","email","plan","setPlan","currentUser","collection","doc","get","then","querySnapshot","empty"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\nimport LoginScreen from './screens/LoginScreen';\nimport db, { auth } from './firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './screens/ProfileScreen';\nimport Watching from './screens/Watching';\nimport ManageProfiles from './screens/ManageProfiles';\nimport SignUpScreen from './screens/SignUpScreen';\nimport SignInScreen from './screens/SignInScreen';\n\nfunction App() {\n\n  const user = useSelector(selectUser);\n\n  const dispatch = useDispatch();\n\n  //For logging in and logging out\n  //Need for the retention of logged in info\n  useEffect(() => {\n    //acts like a listerner so it listens to any authenticated state change\n    //if log in and refresh, it will store it to your local memory\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if (userAuth){\n        //logged in\n        dispatch(login({\n          uid: userAuth.uid,\n          email: userAuth.email,\n        }))\n      } else {\n        //logged out\n        dispatch(logout())\n      }\n    });\n    \n    //cleaning up\n    //if the component was to unmount, we don't want to duplicate another listerner\n    return unsubscribe\n  }, [dispatch, auth])\n\n  /* For checking if user has subscribed to a plan */\n  /* Only when user has subscribed to a plan, then render the movies */\n  const [plan, setPlan] = useState()\n\n  const currentUser = auth.currentUser\n  if (currentUser){\n    db.collection('customers')\n      .doc(user.uid)\n      .collection('subscriptions')\n      .get()\n      .then((querySnapshot) => {\n        if(!querySnapshot.empty){\n          setPlan(true)\n        } else {\n          setPlan(false)\n        }\n      })\n  }\n\n  return (\n    <div className=\"app\">\n      <Router forceRefresh = {true}>\n        {/* If there is no user, render the login screen else render the app components */}\n        {!user ? (\n          <LoginScreen/>\n        ) : (!plan ? (\n          <ProfileScreen/>\n        ) : (\n          <Switch>\n            <Route exact path = '/'>\n              <Watching/>\n            </Route>\n            \n            <Route path =\"/home\">\n              <HomeScreen/>\n            </Route>\n\n            <Route exact path='/profile'>\n              <ProfileScreen/>\n            </Route>\n\n            <Route exact path='/signin'>\n              <SignInScreen/>\n            </Route>\n\n            <Route exact path= '/signup'>\n              <SignUpScreen/>\n            </Route>\n\n            <Route exact path='/ManageProfiles'>\n              <ManageProfiles/>\n            </Route>\n          </Switch>\n        ))\n        }\n      </Router>\n        \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}