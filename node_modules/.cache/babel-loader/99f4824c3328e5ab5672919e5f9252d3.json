{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';export var userSlice=createSlice({name:\"user\",initialState:{user:null},// The `reducers` field lets us define reducers and generate associated actions\n// In here the login and logout are called actions\n// These actions can then be dispatch and it will do the appropriate behavoir\nreducers:{login:function login(state,action){state.user=action.payload;},logout:function logout(state){//resetting back the user to null\nstate.user=null;}}});var _userSlice$actions=userSlice.actions,login=_userSlice$actions.login,logout=_userSlice$actions.logout;// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport{login,logout};export var selectUser=function selectUser(state){return state.user.user;};export default userSlice.reducer;","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/netflix-clone/src/features/userSlice.js"],"names":["createSlice","userSlice","name","initialState","user","reducers","login","state","action","payload","logout","actions","selectUser","reducer"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAEA,MAAO,IAAMC,CAAAA,SAAS,CAAGD,WAAW,CAAC,CACnCE,IAAI,CAAE,MAD6B,CAEnCC,YAAY,CAAE,CACZC,IAAI,CAAE,IADM,CAFqB,CAKnC;AACA;AACA;AACAC,QAAQ,CAAE,CACRC,KAAK,CAAE,eAACC,KAAD,CAAQC,MAAR,CAAmB,CACxBD,KAAK,CAACH,IAAN,CAAaI,MAAM,CAACC,OAApB,CACD,CAHO,CAIRC,MAAM,CAAE,gBAACH,KAAD,CAAW,CACjB;AACAA,KAAK,CAACH,IAAN,CAAa,IAAb,CACD,CAPO,CARyB,CAAD,CAA7B,CAmBA,uBAA0BH,SAAS,CAACU,OAApC,CAAQL,KAAR,oBAAQA,KAAR,CAAeI,MAAf,oBAAeA,MAAf,CAEP;AACA;AACA;qBACA,MAAO,IAAME,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACL,KAAD,QAAWA,CAAAA,KAAK,CAACH,IAAN,CAAWA,IAAtB,EAAnB,CAEP,cAAeH,CAAAA,SAAS,CAACY,OAAzB","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nexport const userSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    user: null,\n  },\n  // The `reducers` field lets us define reducers and generate associated actions\n  // In here the login and logout are called actions\n  // These actions can then be dispatch and it will do the appropriate behavoir\n  reducers: {\n    login: (state, action) => {\n      state.user = action.payload;\n    },\n    logout: (state) => {\n      //resetting back the user to null\n      state.user = null;\n    },\n  },\n});\n\nexport const { login, logout } = userSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectUser = (state) => state.user.user;\n\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}