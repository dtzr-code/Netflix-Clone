{"ast":null,"code":"import _slicedToArray from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import'./App.css';import HomeScreen from'./screens/HomeScreen';import{BrowserRouter as Router,Switch,Route}from\"react-router-dom\";import LoginScreen from'./screens/LoginScreen';import db,{auth}from'./firebase';import{useDispatch,useSelector}from'react-redux';import{login,logout,selectUser}from'./features/userSlice';import ProfileScreen from'./screens/ProfileScreen';import Watching from'./screens/Watching';import ManageProfiles from'./screens/ManageProfiles';import SignInScreen from'./screens/SignInScreen';import SignUpScreen from'./screens/SignUpScreen';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var user=useSelector(selectUser);var dispatch=useDispatch();//For logging in and logging out\n//Need for the retention of logged in info\nuseEffect(function(){//acts like a listerner so it listens to any authenticated state change\n//if log in and refresh, it will store it to your local memory\nvar unsubscribe=auth.onAuthStateChanged(function(userAuth){if(userAuth){//logged in\ndispatch(login({uid:userAuth.uid,email:userAuth.email}));}else{//logged out\ndispatch(logout());}});//cleaning up\n//if the component was to unmount, we don't want to duplicate another listerner\nreturn unsubscribe;},[dispatch,auth]);/* For checking if user has subscribed to a plan */ /* Only when user has subscribed to a plan, then render the movies */var _useState=useState(),_useState2=_slicedToArray(_useState,2),plan=_useState2[0],setPlan=_useState2[1];var currentUser=auth.currentUser;if(currentUser){db.collection('customers').doc(user.uid).collection('subscriptions').get().then(function(querySnapshot){if(!querySnapshot.empty){setPlan(true);}else{setPlan(false);}});}return/*#__PURE__*/_jsx(\"div\",{className:\"app\",children:/*#__PURE__*/_jsx(Router,{children:!user?/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",children:/*#__PURE__*/_jsx(LoginScreen,{})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/signin\",children:/*#__PURE__*/_jsx(SignInScreen,{})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/signup\",children:/*#__PURE__*/_jsx(SignUpScreen,{})})]}):!plan?/*#__PURE__*/_jsx(ProfileScreen,{}):/*#__PURE__*/_jsxs(Switch,{children:[/*#__PURE__*/_jsx(Route,{exact:true,path:\"/\",children:/*#__PURE__*/_jsx(Watching,{})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/home\",children:/*#__PURE__*/_jsx(HomeScreen,{})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/profile\",children:/*#__PURE__*/_jsx(ProfileScreen,{})}),/*#__PURE__*/_jsx(Route,{exact:true,path:\"/ManageProfiles\",children:/*#__PURE__*/_jsx(ManageProfiles,{})})]})})});}export default App;","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/netflix-clone/src/App.js"],"names":["React","useEffect","useState","HomeScreen","BrowserRouter","Router","Switch","Route","LoginScreen","db","auth","useDispatch","useSelector","login","logout","selectUser","ProfileScreen","Watching","ManageProfiles","SignInScreen","SignUpScreen","App","user","dispatch","unsubscribe","onAuthStateChanged","userAuth","uid","email","plan","setPlan","currentUser","collection","doc","get","then","querySnapshot","empty"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport HomeScreen from './screens/HomeScreen';\nimport {BrowserRouter as Router, Switch, Route} from \"react-router-dom\"\nimport LoginScreen from './screens/LoginScreen';\nimport db, { auth } from './firebase';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { login, logout, selectUser } from './features/userSlice';\nimport ProfileScreen from './screens/ProfileScreen';\nimport Watching from './screens/Watching';\nimport ManageProfiles from './screens/ManageProfiles';\nimport SignInScreen from './screens/SignInScreen';\nimport SignUpScreen from './screens/SignUpScreen';\n\nfunction App() {\n\n  const user = useSelector(selectUser);\n\n  const dispatch = useDispatch();\n\n  //For logging in and logging out\n  //Need for the retention of logged in info\n  useEffect(() => {\n    //acts like a listerner so it listens to any authenticated state change\n    //if log in and refresh, it will store it to your local memory\n    const unsubscribe = auth.onAuthStateChanged((userAuth) => {\n      if (userAuth){\n        //logged in\n        dispatch(login({\n          uid: userAuth.uid,\n          email: userAuth.email,\n        }))\n      } else {\n        //logged out\n        dispatch(logout())\n      }\n    });\n    \n    //cleaning up\n    //if the component was to unmount, we don't want to duplicate another listerner\n    return unsubscribe\n  }, [dispatch, auth])\n\n  /* For checking if user has subscribed to a plan */\n  /* Only when user has subscribed to a plan, then render the movies */\n  const [plan, setPlan] = useState()\n\n  const currentUser = auth.currentUser\n  if (currentUser){\n    db.collection('customers')\n      .doc(user.uid)\n      .collection('subscriptions')\n      .get()\n      .then((querySnapshot) => {\n        if(!querySnapshot.empty){\n          setPlan(true)\n        } else {\n          setPlan(false)\n        }\n      })\n  }\n\n  return (\n    <div className=\"app\">\n      <Router>\n        {/* If there is no user, render the login screen else render the app components */}\n        {!user ? (\n          <Switch>\n            <Route exact path='/'>\n              <LoginScreen/>\n            </Route>\n            <Route exact path='/signin'>\n              <SignInScreen/>\n            </Route>\n            <Route exact path='/signup'>\n              <SignUpScreen/>\n            </Route>\n          </Switch>\n        ) : (!plan ? (\n          <ProfileScreen/>\n        ) : (\n          <Switch>\n            <Route exact path = '/'>\n              <Watching/>\n            </Route>\n            \n            <Route exact path =\"/home\">\n              <HomeScreen/>\n            </Route>\n\n            <Route exact path='/profile'>\n              <ProfileScreen/>\n            </Route>\n\n            <Route exact path='/ManageProfiles'>\n              <ManageProfiles/>\n            </Route>\n          </Switch>\n        ))\n        }\n      </Router>\n        \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}