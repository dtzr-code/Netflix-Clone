{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import\"./Row.css\";import axios from'../axios';import YouTube from'react-youtube';/* npm install --save youtube-api */import{API_KEY}from'../Requests';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Row(_ref){var title=_ref.title,fetchUrl=_ref.fetchUrl,_ref$isLargeRow=_ref.isLargeRow,isLargeRow=_ref$isLargeRow===void 0?false:_ref$isLargeRow;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];var base_url='https://image.tmdb.org/t/p/original';//useEffect dependent on the variable fetchUrl\nuseEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);/* To show the trailers */var opts={height:\"500\",width:\"100%\",playerVars:{autoplay:1}};/* When the user clicked on the picture */var handleClick=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(movie){var _trailerurl$data$resu,trailerurl;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!trailerUrl){_context2.next=4;break;}setTrailerUrl(\"\");_context2.next=8;break;case 4:_context2.next=6;return axios.get(\"/movie/\".concat(movie.id,\"/videos?api_key=\").concat(API_KEY));case 6:trailerurl=_context2.sent;setTrailerUrl((_trailerurl$data$resu=trailerurl.data.results[0])===null||_trailerurl$data$resu===void 0?void 0:_trailerurl$data$resu.key);/* To get the value of the id key*/case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function handleClick(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{className:\"row\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"row__posters\",children:movies.map(function(movie){return(//This conditional statement prevents any deadlinks \n//Only render image if isLargeRow and there is poster_path or if is not isLargerow and there is backdrop_path\n(isLargeRow&&movie.poster_path||!isLargeRow&&movie.backdrop_path)&&/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"row__poster \".concat(isLargeRow&&\"row__posterLarge\"),src:\"\".concat(base_url).concat(//if isLargeRow, use poster_path else backdrop_path\nisLargeRow?movie.poster_path:movie.backdrop_path),alt:movie.name},movie.id));})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]});}export default Row;","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/netflix-clone/src/components/Row.js"],"names":["React","useEffect","useState","axios","YouTube","API_KEY","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","base_url","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","id","trailerurl","key","map","poster_path","backdrop_path","name"],"mappings":"geAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAO,WAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CAAqC,oCACrC,OAAQC,OAAR,KAAsB,aAAtB,C,wFAEA,QAASC,CAAAA,GAAT,MAAqD,IAAtCC,CAAAA,KAAsC,MAAtCA,KAAsC,CAA/BC,QAA+B,MAA/BA,QAA+B,sBAArBC,UAAqB,CAArBA,UAAqB,0BAAR,KAAQ,iBAEnD,cAA4BP,QAAQ,CAAC,EAAD,CAApC,wCAAOQ,MAAP,eAAeC,SAAf,eACA,eAAoCT,QAAQ,CAAC,EAAD,CAA5C,yCAAOU,UAAP,eAAmBC,aAAnB,eAEA,GAAMC,CAAAA,QAAQ,CAAG,qCAAjB,CAEA;AACAb,SAAS,CAAC,UAAM,SACCc,CAAAA,SADD,qIACd,qKACwBZ,CAAAA,KAAK,CAACa,GAAN,CAAUR,QAAV,CADxB,QACQS,OADR,eAEEN,SAAS,CAACM,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFF,gCAGSF,OAHT,wDADc,4CAMdF,SAAS,GACV,CAPQ,CAON,CAACP,QAAD,CAPM,CAAT,CASA,0BACA,GAAMY,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,MAFI,CAGXC,UAAU,CAAE,CACRC,QAAQ,CAAE,CADF,CAHD,CAAb,CAQA,0CACA,GAAMC,CAAAA,WAAW,2FAAG,kBAAOC,KAAP,+JAEdd,UAFc,0BAGhBC,aAAa,CAAC,EAAD,CAAb,CAHgB,qDAKOV,CAAAA,KAAK,CAACa,GAAN,kBACXU,KAAK,CAACC,EADK,4BACgBtB,OADhB,EALP,QAKZuB,UALY,gBAQhBf,aAAa,wBAACe,UAAU,CAACV,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,gDAAC,sBAA4BU,GAA7B,CAAb,CAAiD,mCARjC,wDAAH,kBAAXJ,CAAAA,WAAW,6CAAjB,CAaA,mBACE,aAAK,SAAS,CAAC,KAAf,wBACE,oBAAKlB,KAAL,EADF,cAGE,YAAK,SAAS,CAAC,cAAf,UACGG,MAAM,CAACoB,GAAP,CAAW,SAACJ,KAAD,QAEV;AACA;AACA,CAAEjB,UAAU,EAAIiB,KAAK,CAACK,WAArB,EACE,CAACtB,UAAD,EAAeiB,KAAK,CAACM,aADxB,gBAEE,YACA,OAAO,CAAE,yBAAIP,CAAAA,WAAW,CAACC,KAAD,CAAf,EADT,CAEA,SAAS,uBAAiBjB,UAAU,EAAI,kBAA/B,CAFT,CAIA,GAAG,WAAKK,QAAL,SACD;AACAL,UAAU,CAAGiB,KAAK,CAACK,WAAT,CAAuBL,KAAK,CAACM,aAFtC,CAJH,CAQA,GAAG,CAAEN,KAAK,CAACO,IARX,EAGOP,KAAK,CAACC,EAHb,CANQ,GAAX,CADH,EAHF,CAyBGf,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEQ,IAApC,EAzBjB,GADF,CA6BD,CAED,cAAed,CAAAA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport \"./Row.css\"\nimport axios from '../axios'\nimport YouTube from 'react-youtube'; /* npm install --save youtube-api */\nimport {API_KEY} from '../Requests'\n\nfunction Row({ title, fetchUrl, isLargeRow = false}) {\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  const base_url = 'https://image.tmdb.org/t/p/original';\n\n  //useEffect dependent on the variable fetchUrl\n  useEffect(() => {\n    async function fetchData(){\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl])\n\n  /* To show the trailers */\n  const opts = {\n    height: \"500\",\n    width: \"100%\",\n    playerVars: {\n        autoplay: 1,\n    }\n  }\n\n  /* When the user clicked on the picture */\n  const handleClick = async (movie) => {\n    /* if the video is already open, close it by setting the setTrailerUrl to empty */\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      let trailerurl = await axios.get(\n        `/movie/${movie.id}/videos?api_key=${API_KEY}`\n      );\n      setTrailerUrl(trailerurl.data.results[0]?.key);  /* To get the value of the id key*/\n    }\n  };\n\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n\n          //This conditional statement prevents any deadlinks \n          //Only render image if isLargeRow and there is poster_path or if is not isLargerow and there is backdrop_path\n          ((isLargeRow && movie.poster_path) ||\n            (!isLargeRow && movie.backdrop_path)) && (\n            <img \n            onClick={()=>handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            key = {movie.id}\n            src={`${base_url}${\n              //if isLargeRow, use poster_path else backdrop_path\n              isLargeRow ? movie.poster_path : movie.backdrop_path}`\n            } \n            alt={movie.name}\n            />\n          )\n        ))}\n      </div>\n      \n      {/* Only when trailerUrl exists then play youtube video */}\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\n    </div>\n  )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}