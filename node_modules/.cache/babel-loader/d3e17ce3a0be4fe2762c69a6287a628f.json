{"ast":null,"code":"var _jsxFileName = \"/Users/dtzr/Documents/GitHub/netflix-clone/src/Banner.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport './Banner.css';\nimport axios from \"./axios\";\nimport requests from \"./Requests\";\nimport { API_KEY } from './Requests';\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Banner() {\n  _s();\n\n  const [movie, setMovie] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(requests.fetchNetflixOriginals);\n      setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]);\n      return request;\n    }\n\n    fetchData();\n  }, []);\n\n  const playtrailer = async movie => {\n    var _trailerurl$data$resu;\n\n    let trailerurl = await axios.get(`/movie/${movie.id}/videos?api_key=${API_KEY}`);\n    setTrailerUrl((_trailerurl$data$resu = trailerurl.data.results[0]) === null || _trailerurl$data$resu === void 0 ? void 0 : _trailerurl$data$resu.key);\n\n    /*#__PURE__*/\n    _jsxDEV(YouTube, {\n      videoId: trailerUrl\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this);\n  };\n\n  function truncate(string, n) {\n    //for cutting off the movie description and ends it with a ...\n    //we need to use string with a ? as there may not always be a string being passed, some may be undefined\n    return (string === null || string === void 0 ? void 0 : string.length) > n ? string.substr(0, n - 1) + '...' : string;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    onMouseEnter: () => playtrailer(movie),\n    className: \"banner\" //doing an inline styling\n    ,\n    style: {\n      backgroundSize: \"cover\",\n      backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie === null || movie === void 0 ? void 0 : movie.backdrop_path}\")`,\n      backgroundPosition: \"center center\"\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"banner__contents\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"banner__title\",\n        children: (movie === null || movie === void 0 ? void 0 : movie.title) || (movie === null || movie === void 0 ? void 0 : movie.name) || (movie === null || movie === void 0 ? void 0 : movie.orginal_name)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"banner__buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"banner__button\",\n          children: \"Play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"banner__button\",\n          children: \"My List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"banner__description\",\n        children: truncate(movie === null || movie === void 0 ? void 0 : movie.overview, 100)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Banner, \"zZyCoLfg2JicprQJm3vJeM/lFW4=\");\n\n_c = Banner;\nexport default Banner;\n\nvar _c;\n\n$RefreshReg$(_c, \"Banner\");","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/netflix-clone/src/Banner.js"],"names":["React","useEffect","useState","axios","requests","API_KEY","YouTube","Banner","movie","setMovie","trailerUrl","setTrailerUrl","fetchData","request","get","fetchNetflixOriginals","data","results","Math","floor","random","length","playtrailer","trailerurl","id","key","truncate","string","n","substr","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","title","name","orginal_name","overview"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport './Banner.css'\nimport axios from \"./axios\"\nimport requests from \"./Requests\"\nimport {API_KEY} from './Requests'\nimport YouTube from 'react-youtube'\n\n\nfunction Banner() {\n\n  const [movie, setMovie] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  useEffect(()=> {\n    async function fetchData(){\n      const request = await axios.get(requests.fetchNetflixOriginals);\n\n      setMovie(\n        request.data.results[\n          Math.floor(Math.random() * request.data.results.length - 1)\n        ]\n      );\n      return request;\n    }\n\n    fetchData();\n  }, [])\n\n  const playtrailer = async(movie) => {\n    let trailerurl = await axios.get(\n      `/movie/${movie.id}/videos?api_key=${API_KEY}`\n    );\n    setTrailerUrl(trailerurl.data.results[0]?.key);\n    <YouTube videoId = {trailerUrl}/>\n  }\n\n  function truncate(string, n){\n    //for cutting off the movie description and ends it with a ...\n    //we need to use string with a ? as there may not always be a string being passed, some may be undefined\n    return string?.length > n ? string.substr(0, n-1) + '...' : string;\n  }\n\n  return (\n    <header \n      onMouseEnter={() => playtrailer(movie)}\n      className=\"banner\" \n      //doing an inline styling\n      style={{\n      backgroundSize: \"cover\",\n      backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\n      backgroundPosition: \"center center\"}}\n      >\n      <div className=\"banner__contents\">\n        <h1 className=\"banner__title\">\n          {movie?.title || movie?.name || movie?.orginal_name}\n        </h1>\n        <div className=\"banner__buttons\">\n          <button className=\"banner__button\">Play</button>\n          <button className=\"banner__button\">My List</button>\n        </div>\n        <h1 className=\"banner__description\">\n          {truncate(movie?.overview, 100)}\n        </h1>\n      </div>\n      \n    </header>\n  )\n}\n\nexport default Banner\n"]},"metadata":{},"sourceType":"module"}