{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Derrick\\\\Github\\\\netflix-clone\\\\src\\\\screens\\\\HomeScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport \"./HomeScreen.css\";\nimport Nav from '../components/Nav';\nimport Row from '../components/Row';\nimport Banner from '../components/Banner';\nimport requests from '../Requests';\nimport { API_KEY } from '../Requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction HomeScreen() {\n  _s();\n\n  /* for the search results */\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const search_query = `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchTerm}`;\n  /* To see if the searchbar is active */\n\n  const [isSearch, setisSearch] = useState(false);\n\n  const handleChange = e => {\n    setSearchTerm(e);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"homeScreen\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      toggleSearch: !isSearch,\n      value: searchTerm,\n      handleChange: e => handleChange(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Banner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), \"if (condition) \", /*#__PURE__*/_jsxDEV(Row, {\n      title: \"Search Results\",\n      fetchUrl: search_query\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      title: \"NETFLIX ORIGINALS\",\n      fetchUrl: requests.fetchNetflixOriginals,\n      isLargeRow: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      title: \"Trending Now\",\n      fetchUrl: requests.fetchTrending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      title: \"Top Rated\",\n      fetchUrl: requests.fetchTopRated\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      title: \"Action Movies\",\n      fetchUrl: requests.fetchActionMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      title: \"Comedy Movies\",\n      fetchUrl: requests.fetchComedyMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      title: \"Horror Movies\",\n      fetchUrl: requests.fetchHorrorMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      title: \"Romance Movies\",\n      fetchUrl: requests.fetchRomanceMovies\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      title: \"Documentaries\",\n      fetchUrl: requests.fetchDocumentaries\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HomeScreen, \"nam/aWnNK6Tpm1sESgu6H+SDFlg=\");\n\n_c = HomeScreen;\nexport default HomeScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomeScreen\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Derrick/Github/netflix-clone/src/screens/HomeScreen.js"],"names":["React","useState","Nav","Row","Banner","requests","API_KEY","HomeScreen","searchTerm","setSearchTerm","search_query","isSearch","setisSearch","handleChange","e","target","value","fetchNetflixOriginals","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAO,kBAAP;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,GAAP,MAAgB,mBAAhB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,SAASC,UAAT,GAAsB;AAAA;;AAEpB;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAMS,YAAY,GAAG,qDAAoDJ,OAAQ,UAASE,UAAW,EAArG;AAEA;;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,KAAD,CAAxC;;AAEA,QAAMY,YAAY,GAAGC,CAAC,IAAI;AACxBL,IAAAA,aAAa,CAACK,CAAD,CAAb;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,4BAEE,QAAC,GAAD;AACE,MAAA,YAAY,EAAE,CAACH,QADjB;AAEE,MAAA,KAAK,EAAEH,UAFT;AAGE,MAAA,YAAY,EAAEM,CAAC,IAAGD,YAAY,CAACC,CAAC,CAACC,MAAF,CAASC,KAAV;AAHhC;AAAA;AAAA;AAAA;AAAA,YAFF,eASE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YATF,kCAiBI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAC,gBAAX;AAA4B,MAAA,QAAQ,EAAIN;AAAxC;AAAA;AAAA;AAAA;AAAA,YAjBJ,eAkBI,QAAC,GAAD;AACE,MAAA,KAAK,EAAC,mBADR;AAEE,MAAA,QAAQ,EAAEL,QAAQ,CAACY,qBAFrB;AAGE,MAAA,UAAU;AAHZ;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAuBI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAC,cAAX;AAA0B,MAAA,QAAQ,EAAEZ,QAAQ,CAACa;AAA7C;AAAA;AAAA;AAAA;AAAA,YAvBJ,eAwBI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAC,WAAX;AAAuB,MAAA,QAAQ,EAAEb,QAAQ,CAACc;AAA1C;AAAA;AAAA;AAAA;AAAA,YAxBJ,eAyBI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAC,eAAX;AAA2B,MAAA,QAAQ,EAAEd,QAAQ,CAACe;AAA9C;AAAA;AAAA;AAAA;AAAA,YAzBJ,eA0BI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAC,eAAX;AAA2B,MAAA,QAAQ,EAAEf,QAAQ,CAACgB;AAA9C;AAAA;AAAA;AAAA;AAAA,YA1BJ,eA2BI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAC,eAAX;AAA2B,MAAA,QAAQ,EAAEhB,QAAQ,CAACiB;AAA9C;AAAA;AAAA;AAAA;AAAA,YA3BJ,eA4BI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAC,gBAAX;AAA4B,MAAA,QAAQ,EAAEjB,QAAQ,CAACkB;AAA/C;AAAA;AAAA;AAAA;AAAA,YA5BJ,eA6BI,QAAC,GAAD;AAAK,MAAA,KAAK,EAAC,eAAX;AAA2B,MAAA,QAAQ,EAAElB,QAAQ,CAACmB;AAA9C;AAAA;AAAA;AAAA;AAAA,YA7BJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD;;GA/CQjB,U;;KAAAA,U;AAiDT,eAAeA,UAAf","sourcesContent":["import React, {useState} from 'react'\r\nimport \"./HomeScreen.css\"\r\nimport Nav from '../components/Nav'\r\nimport Row from '../components/Row'\r\nimport Banner from '../components/Banner'\r\nimport requests from '../Requests'\r\nimport { API_KEY } from '../Requests'\r\n\r\nfunction HomeScreen() {\r\n\r\n  /* for the search results */\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n\r\n  const search_query= `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchTerm}`\r\n\r\n  /* To see if the searchbar is active */\r\n  const [isSearch, setisSearch] = useState(false)\r\n\r\n  const handleChange = e => {\r\n    setSearchTerm(e)\r\n  }\r\n\r\n  return (\r\n    <div className=\"homeScreen\">\r\n      {/* Nav */}\r\n      <Nav \r\n        toggleSearch={!isSearch}\r\n        value={searchTerm} \r\n        handleChange={e=> handleChange(e.target.value)}\r\n      />\r\n\r\n      {/* Banner */}\r\n      <Banner/>\r\n\r\n        {/* Row */}\r\n        {/* Each row will take a few different props */}\r\n        {/* Props allow us to customise one component from another */}\r\n        if (condition) {\r\n          \r\n        }\r\n        <Row title=\"Search Results\" fetchUrl = {search_query}/>\r\n        <Row\r\n          title=\"NETFLIX ORIGINALS\"\r\n          fetchUrl={requests.fetchNetflixOriginals}\r\n          isLargeRow\r\n        />\r\n        <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n        <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\r\n        <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\r\n        <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\r\n        <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\r\n        <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\r\n        <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HomeScreen\r\n"]},"metadata":{},"sourceType":"module"}