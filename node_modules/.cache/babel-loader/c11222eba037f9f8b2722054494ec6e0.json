{"ast":null,"code":"import _regeneratorRuntime from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/dtzr/Documents/GitHub/netflix-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect,useState}from'react';import\"./SearchRow.css\";import axios from'../axios';import YouTube from'react-youtube';/* npm install --save youtube-api */import{API_KEY}from'../Requests';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function SearchRow(_ref){var title=_ref.title,_ref$fetchUrl=_ref.fetchUrl,fetchUrl=_ref$fetchUrl===void 0?false:_ref$fetchUrl;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),trailerUrl=_useState4[0],setTrailerUrl=_useState4[1];var base_url='https://image.tmdb.org/t/p/original';//useEffect dependent on the variable fetchUrl\nuseEffect(function(){function fetchData(){return _fetchData.apply(this,arguments);}function _fetchData(){_fetchData=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var request;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return axios.get(fetchUrl);case 2:request=_context.sent;setMovies(request.data.results);return _context.abrupt(\"return\",request);case 5:case\"end\":return _context.stop();}}},_callee);}));return _fetchData.apply(this,arguments);}fetchData();},[fetchUrl]);/* To show the trailers */var opts={height:\"500\",width:\"100%\",playerVars:{autoplay:1}};/* When the user clicked on the picture */var handleClick=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(movie){var _trailerurl$data$resu,trailerurl;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(!trailerUrl){_context2.next=4;break;}setTrailerUrl(\"\");_context2.next=8;break;case 4:_context2.next=6;return axios.get(\"/movie/\".concat(movie.id,\"/videos?api_key=\").concat(API_KEY));case 6:trailerurl=_context2.sent;setTrailerUrl((_trailerurl$data$resu=trailerurl.data.results[0])===null||_trailerurl$data$resu===void 0?void 0:_trailerurl$data$resu.key);/* To get the value of the id key*/case 8:case\"end\":return _context2.stop();}}},_callee2);}));return function handleClick(_x){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(\"div\",{className:\"searchrow__container\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"searchrow\",children:[/*#__PURE__*/_jsx(\"h2\",{children:title}),/*#__PURE__*/_jsx(\"div\",{className:\"searchrow__posters\",children:movies.map(function(movie){return/*#__PURE__*/_jsx(\"img\",{onClick:function onClick(){return handleClick(movie);},className:\"searchrow__poster\",src:\"\".concat(base_url).concat(movie.backdrop_path),alt:movie.name},movie.id);})}),trailerUrl&&/*#__PURE__*/_jsx(YouTube,{videoId:trailerUrl,opts:opts})]})});}export default SearchRow;","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/netflix-clone/src/components/SearchRow.js"],"names":["React","useEffect","useState","axios","YouTube","API_KEY","SearchRow","title","fetchUrl","movies","setMovies","trailerUrl","setTrailerUrl","base_url","fetchData","get","request","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","id","trailerurl","key","map","backdrop_path","name"],"mappings":"geAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAO,iBAAP,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,MAAOC,CAAAA,OAAP,KAAoB,eAApB,CAAqC,oCACrC,OAAQC,OAAR,KAAsB,aAAtB,C,wFAEA,QAASC,CAAAA,SAAT,MAA+C,IAA1BC,CAAAA,KAA0B,MAA1BA,KAA0B,oBAAnBC,QAAmB,CAAnBA,QAAmB,wBAAR,KAAQ,eAE7C,cAA4BN,QAAQ,CAAC,EAAD,CAApC,wCAAOO,MAAP,eAAeC,SAAf,eACA,eAAoCR,QAAQ,CAAC,EAAD,CAA5C,yCAAOS,UAAP,eAAmBC,aAAnB,eAEA,GAAMC,CAAAA,QAAQ,CAAG,qCAAjB,CAEA;AACAZ,SAAS,CAAC,UAAM,SACCa,CAAAA,SADD,qIACd,qKACwBX,CAAAA,KAAK,CAACY,GAAN,CAAUP,QAAV,CADxB,QACQQ,OADR,eAEEN,SAAS,CAACM,OAAO,CAACC,IAAR,CAAaC,OAAd,CAAT,CAFF,gCAGSF,OAHT,wDADc,4CAMdF,SAAS,GACV,CAPQ,CAON,CAACN,QAAD,CAPM,CAAT,CASA,0BACA,GAAMW,CAAAA,IAAI,CAAG,CACXC,MAAM,CAAE,KADG,CAEXC,KAAK,CAAE,MAFI,CAGXC,UAAU,CAAE,CACRC,QAAQ,CAAE,CADF,CAHD,CAAb,CAQA,0CACA,GAAMC,CAAAA,WAAW,2FAAG,kBAAOC,KAAP,+JAEdd,UAFc,0BAGhBC,aAAa,CAAC,EAAD,CAAb,CAHgB,qDAKOT,CAAAA,KAAK,CAACY,GAAN,kBACXU,KAAK,CAACC,EADK,4BACgBrB,OADhB,EALP,QAKZsB,UALY,gBAQhBf,aAAa,wBAACe,UAAU,CAACV,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,gDAAC,sBAA4BU,GAA7B,CAAb,CAAiD,mCARjC,wDAAH,kBAAXJ,CAAAA,WAAW,6CAAjB,CAYA,mBACI,YAAK,SAAS,CAAC,sBAAf,uBACE,aAAK,SAAS,CAAC,WAAf,wBACA,oBAAKjB,KAAL,EADA,cAGA,YAAK,SAAS,CAAC,oBAAf,UACKE,MAAM,CAACoB,GAAP,CAAW,SAACJ,KAAD,qBACR,YACI,OAAO,CAAE,yBAAID,CAAAA,WAAW,CAACC,KAAD,CAAf,EADb,CAEI,SAAS,CAAC,mBAFd,CAII,GAAG,WAAKZ,QAAL,SAAgBY,KAAK,CAACK,aAAtB,CAJP,CAKI,GAAG,CAAEL,KAAK,CAACM,IALf,EAGWN,KAAK,CAACC,EAHjB,CADQ,EAAX,CADL,EAHA,CAiBCf,UAAU,eAAI,KAAC,OAAD,EAAS,OAAO,CAAEA,UAAlB,CAA8B,IAAI,CAAEQ,IAApC,EAjBf,GADF,EADJ,CAuBD,CAED,cAAeb,CAAAA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport \"./SearchRow.css\"\nimport axios from '../axios'\nimport YouTube from 'react-youtube'; /* npm install --save youtube-api */\nimport {API_KEY} from '../Requests'\n\nfunction SearchRow({ title, fetchUrl = false}) {\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  const base_url = 'https://image.tmdb.org/t/p/original';\n\n  //useEffect dependent on the variable fetchUrl\n  useEffect(() => {\n    async function fetchData(){\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl])\n\n  /* To show the trailers */\n  const opts = {\n    height: \"500\",\n    width: \"100%\",\n    playerVars: {\n        autoplay: 1,\n    }\n  }\n\n  /* When the user clicked on the picture */\n  const handleClick = async (movie) => {\n    /* if the video is already open, close it by setting the setTrailerUrl to empty */\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      let trailerurl = await axios.get(\n        `/movie/${movie.id}/videos?api_key=${API_KEY}`\n      );\n      setTrailerUrl(trailerurl.data.results[0]?.key);  /* To get the value of the id key*/\n    }\n  };\n    \n  return (\n      <div className=\"searchrow__container\">\n        <div className=\"searchrow\">\n        <h2>{title}</h2>\n\n        <div className=\"searchrow__posters\">\n            {movies.map((movie) => (\n                <img \n                    onClick={()=>handleClick(movie)}\n                    className=\"searchrow__poster\"\n                    key = {movie.id}\n                    src={`${base_url}${movie.backdrop_path}`} \n                    alt={movie.name}\n                />\n            )\n            )}\n        </div>\n        \n        {/* Only when trailerUrl exists then play youtube video */}\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\n        </div>\n    </div>\n  )\n}\n\nexport default SearchRow\n"]},"metadata":{},"sourceType":"module"}