{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\Derrick\\\\Github\\\\netflix-clone\\\\src\\\\screens\\\\PlanScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../features/userSlice';\nimport db from '../firebase';\nimport './PlanScreen.css';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlanScreen() {\n  _s();\n\n  const [products, setProducts] = useState([]);\n  const user = useSelector(selectUser);\n  /* To retrieve the subscription data of the user */\n\n  const [subscription, setSubscription] = useState(null);\n  useEffect(() => {\n    db.collection(\"customers\").doc(user.uid).collection('subscriptions').get().then(querySnapshot => {\n      /* querySnapshot represents the result of a query */\n\n      /* loop through forEach subscriptions and retrieve the role attribute, current period start and end */\n      querySnapshot.forEach(async subscription => {\n        setSubscription({\n          role: subscription.data().role,\n          current_period_end: subscription.data().current_period_end.seconds,\n          current_period_start: subscription.data().current_period_start.seconds\n        });\n      });\n    });\n  }, []);\n  /* fetch the plans from the database */\n\n  /* The documents can be accessed as an array via the docs property or enumerated using the forEach method.  */\n\n  /* https://console.firebase.google.com/project/netflix2-clone-e95d8/firestore/data~2Fproducts~2Fprod_JT3hRI7rwmgJfh */\n\n  /* The 'products' and 'active' attribute is displayed in the link above */\n\n  useEffect(() => {\n    db.collection('products').where('active', '==', true).get().then(querySnapshot => {\n      const products = {};\n      querySnapshot.forEach(async productDoc => {\n        products[productDoc.id] = productDoc.data();\n        const priceSnap = await productDoc.ref.collection('prices').get();\n        priceSnap.docs.forEach(price => {\n          products[productDoc.id].prices = {\n            priceId: price.id,\n            priceData: price.data()\n          };\n        });\n      });\n      setProducts(products);\n    });\n  }, []);\n  console.log(\"The products are: \", products);\n  /* Returns an object */\n\n  console.log(\"Subscription is: \", subscription);\n  /* function to render the checkout/paying screen */\n\n  const loadCheckout = async priceId => {\n    //pulling the user from the redux store\n    const docRef = await db.collection('customers').doc(user.uid).collection(\"checkout_sessions\").add({\n      price: priceId,\n      success_url: window.location.origin,\n      cancel_url: window.location.origin\n    });\n    docRef.onSnapshot(async snap => {\n      const {\n        error,\n        sessionId\n      } = snap.data();\n\n      if (error) {\n        //show an error to your customer and inspect your Cloud Function logs in the Firebase console\n        alert(`An error occured: ${error.message}`);\n      }\n\n      if (sessionId) {\n        //We have a session, lets redirect to Checkout\n        //Initialise stripe\n        const strip = await loadStripe('pk_test_51IpNyNFws4ncZVjIE5PzlqMhXPP780p2H9hetmUSWL48bAnpSxUwzAmikcBNhORCyfolUWnt8dAs4gvlMEvKY6IJ00IUI0r1Gh');\n        strip.redirectToCheckout({\n          sessionId\n        });\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"planScreen\",\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), subscription && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Renewal data: \", \" \", new Date((subscription === null || subscription === void 0 ? void 0 : subscription.current_period_end) * 1000).toLocaleDateString()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this), Object.entries(products).map(([productId, productData]) => {\n      //Add some logic to check if the user's subscription is active\n      const isCurrentPackage = productData.name.includes(subscription === null || subscription === void 0 ? void 0 : subscription.role);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        //if isCurrentPackage then i want to add on the \"planScreen_plan--disabled\" className \n        className: `${isCurrentPackage && \"planScreen__plan--disabled\"} planScreen__plan`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"planScreen__info\",\n          children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n            children: productData.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"h6\", {\n            children: productData.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => !isCurrentPackage && loadCheckout(productData.prices.priceId),\n          children: isCurrentPackage ? 'Current Package' : 'Subscribe'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this)]\n      }, productId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(PlanScreen, \"60ANDhvF363l9RFtL6pi3jSO424=\", false, function () {\n  return [useSelector];\n});\n\n_c = PlanScreen;\nexport default PlanScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlanScreen\");","map":{"version":3,"sources":["C:/Users/User/Desktop/Derrick/Github/netflix-clone/src/screens/PlanScreen.js"],"names":["React","useEffect","useState","useSelector","selectUser","db","loadStripe","PlanScreen","products","setProducts","user","subscription","setSubscription","collection","doc","uid","get","then","querySnapshot","forEach","role","data","current_period_end","seconds","current_period_start","where","productDoc","id","priceSnap","ref","docs","price","prices","priceId","priceData","console","log","loadCheckout","docRef","add","success_url","window","location","origin","cancel_url","onSnapshot","snap","error","sessionId","alert","message","strip","redirectToCheckout","Date","toLocaleDateString","Object","entries","map","productId","productData","isCurrentPackage","name","includes","description"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectUser } from '../features/userSlice'\r\nimport db from '../firebase'\r\nimport './PlanScreen.css'\r\nimport {loadStripe} from '@stripe/stripe-js'\r\n\r\nfunction PlanScreen() {\r\n\r\n  const [products, setProducts] = useState([])\r\n  const user = useSelector(selectUser)\r\n\r\n  /* To retrieve the subscription data of the user */\r\n  const [subscription, setSubscription] = useState(null)\r\n\r\n  useEffect(()=> {\r\n      db.collection(\"customers\")\r\n        .doc(user.uid)\r\n        .collection('subscriptions')\r\n        .get()\r\n        .then(querySnapshot => {\r\n\r\n          /* querySnapshot represents the result of a query */\r\n          /* loop through forEach subscriptions and retrieve the role attribute, current period start and end */\r\n          querySnapshot.forEach( async subscription => {\r\n            setSubscription({\r\n              role: subscription.data().role,\r\n              current_period_end: subscription.data().current_period_end.seconds,\r\n              current_period_start: subscription.data().current_period_start.seconds,\r\n            });\r\n          });\r\n        });\r\n  }, [])\r\n\r\n  /* fetch the plans from the database */\r\n  /* The documents can be accessed as an array via the docs property or enumerated using the forEach method.  */\r\n  /* https://console.firebase.google.com/project/netflix2-clone-e95d8/firestore/data~2Fproducts~2Fprod_JT3hRI7rwmgJfh */\r\n  /* The 'products' and 'active' attribute is displayed in the link above */\r\n  useEffect(() => {\r\n        db.collection('products')\r\n        .where('active', '==', true)\r\n        .get()\r\n        .then((querySnapshot) => {\r\n          const products = {};\r\n          querySnapshot.forEach(async (productDoc) => {\r\n            products[productDoc.id] = productDoc.data();\r\n            const priceSnap = await productDoc.ref.collection('prices').get();\r\n            priceSnap.docs.forEach((price) => {\r\n              products[productDoc.id].prices = {\r\n                priceId: price.id,\r\n                priceData: price.data(),\r\n              };\r\n            });\r\n          });\r\n          setProducts(products);\r\n        });\r\n  },[]);\r\n\r\n  console.log(\"The products are: \", products) /* Returns an object */\r\n  console.log(\"Subscription is: \", subscription)\r\n\r\n  /* function to render the checkout/paying screen */\r\n  const loadCheckout = async (priceId) => {\r\n    //pulling the user from the redux store\r\n    const docRef = await db\r\n      .collection('customers')\r\n      .doc(user.uid)\r\n      .collection(\"checkout_sessions\")\r\n      .add({\r\n        price: priceId,\r\n        success_url: window.location.origin,\r\n        cancel_url: window.location.origin,\r\n      })\r\n\r\n      docRef.onSnapshot(async(snap) => {\r\n        const {error, sessionId} = snap.data();\r\n\r\n        if (error){\r\n          //show an error to your customer and inspect your Cloud Function logs in the Firebase console\r\n          alert(`An error occured: ${error.message}`)\r\n        }\r\n\r\n        if (sessionId){\r\n          //We have a session, lets redirect to Checkout\r\n          //Initialise stripe\r\n\r\n          const strip = await loadStripe('pk_test_51IpNyNFws4ncZVjIE5PzlqMhXPP780p2H9hetmUSWL48bAnpSxUwzAmikcBNhORCyfolUWnt8dAs4gvlMEvKY6IJ00IUI0r1Gh');\r\n          strip.redirectToCheckout({sessionId});\r\n        }\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"planScreen\">\r\n\r\n      {/* Renewal date */}\r\n      {/* We only want to render the renewal date if we have the subscriptiond data */}\r\n      <br></br>\r\n      {subscription && (\r\n        <p>\r\n          Renewal data: {\" \"}\r\n          {new Date(\r\n            subscription?.current_period_end * 1000\r\n          ).toLocaleDateString()}\r\n        </p>\r\n      )}\r\n\r\n      {/* Need to map through an object */}\r\n      {/* Object.entries() will return a key-value pair in an array */}\r\n      {/* ​Object.keys(objectName).map( key => (<div>objectName[key]</div>)) */}\r\n      {Object.entries(products).map(([productId, productData]) => {\r\n        //Add some logic to check if the user's subscription is active\r\n        const isCurrentPackage = productData.name\r\n          .includes(subscription?.role);\r\n\r\n        return (\r\n          <div \r\n          key={productId}\r\n\r\n          //if isCurrentPackage then i want to add on the \"planScreen_plan--disabled\" className \r\n          className={`${\r\n            isCurrentPackage && \"planScreen__plan--disabled\"\r\n            } planScreen__plan`}>\r\n            <div className=\"planScreen__info\">\r\n              <h5>{productData.name}</h5>\r\n              <h6>{productData.description}</h6>\r\n            </div>\r\n\r\n            {/* Only trigger the loadCheckout if its not the current package cuz you dw to keep subscribing */}\r\n            <button onClick={() => \r\n              !isCurrentPackage && loadCheckout(productData.prices.priceId)}>\r\n              {isCurrentPackage ? 'Current Package' : 'Subscribe'}\r\n            </button>\r\n          </div>\r\n        )\r\n      })}\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PlanScreen\r\n"]},"metadata":{},"sourceType":"module"}