{"ast":null,"code":"var _jsxFileName = \"/Users/dtzr/Documents/GitHub/netflix-clone/src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./Row.css\";\nimport axios from './axios';\nimport movieTrailer from 'movie-trailer';\n/* npm install --save movie-trailer */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow = false\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const base_url = 'https://image.tmdb.org/t/p/original/'; //useEffect dependent on the variable fetchUrl\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      console.log(request);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  /* To show the trailers */\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n\n  const handleClick = movie => {\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n        const urlParams = new URLSearchParams(new URL(url).search);\n        setTrailerUrl(urlParams.get('v'));\n      }).catch(() => console.log('Temporary Unavailable'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => //This conditional statement prevents any deadlinks \n      //Only render image if isLargeRow and there is poster_path or if is not isLargerow and there is backdrop_path\n      (isLargeRow && movie.poster_path || !isLargeRow && movie.backdrop_path) && /*#__PURE__*/_jsxDEV(\"img\", {\n        onClick: () => handleClick(movie),\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${//if isLargeRow, use poster_path else backdrop_path\n        isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"zcdNe0Lr8rip4Oj/qSSLGY8Tl3o=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/netflix-clone/src/Row.js"],"names":["React","useEffect","useState","axios","movieTrailer","Row","title","fetchUrl","isLargeRow","movies","setMovies","trailerUrl","setTrailerUrl","base_url","fetchData","request","get","data","results","console","log","opts","height","width","playerVars","autoplay","handleClick","movie","name","then","url","urlParams","URLSearchParams","URL","search","catch","map","poster_path","backdrop_path","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAAyC;;;;AAEzC,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,UAAU,GAAG;AAA/B,CAAb,EAAoD;AAAA;;AAElD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAMW,QAAQ,GAAG,sCAAjB,CALkD,CAOlD;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,SAAf,GAA0B;AACxB,YAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUT,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACK,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYL,OAAZ;AACA,aAAOA,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GARQ,EAQN,CAACP,QAAD,CARM,CAAT;AAUA;;AACA,QAAMc,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHD,GAAb;;AAQA,QAAMC,WAAW,GAAIC,KAAD,IAAW;AAC3B,QAAGhB,UAAH,EAAc;AACVC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACH,KAFD,MAEO;AACHR,MAAAA,YAAY,CAAC,CAAAuB,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEC,IAAP,KAAe,EAAhB,CAAZ,CACCC,IADD,CACOC,GAAD,IAAS;AACX,cAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoB,IAAIC,GAAJ,CAAQH,GAAR,EAAaI,MAAjC,CAAlB;AACAtB,QAAAA,aAAa,CAACmB,SAAS,CAACf,GAAV,CAAc,GAAd,CAAD,CAAb;AACH,OAJD,EAKCmB,KALD,CAKO,MAAMhB,OAAO,CAACC,GAAR,CAAY,uBAAZ,CALb;AAMH;AACJ,GAXD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKd;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACGG,MAAM,CAAC2B,GAAP,CAAYT,KAAD,IAEV;AACA;AACA,OAAEnB,UAAU,IAAImB,KAAK,CAACU,WAArB,IACE,CAAC7B,UAAD,IAAemB,KAAK,CAACW,aADxB,kBAEE;AACA,QAAA,OAAO,EAAE,MAAIZ,WAAW,CAACC,KAAD,CADxB;AAEA,QAAA,SAAS,EAAG,eAAcnB,UAAU,IAAI,kBAAmB,EAF3D;AAIA,QAAA,GAAG,EAAG,GAAEK,QAAS,GACf;AACAL,QAAAA,UAAU,GAAGmB,KAAK,CAACU,WAAT,GAAuBV,KAAK,CAACW,aAAc,EANvD;AAQA,QAAA,GAAG,EAAEX,KAAK,CAACC;AARX,SAGOD,KAAK,CAACY,EAHb;AAAA;AAAA;AAAA;AAAA,cANH;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD;;GAnEQlC,G;;KAAAA,G;AAqET,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport \"./Row.css\"\nimport axios from './axios'\nimport movieTrailer from 'movie-trailer' /* npm install --save movie-trailer */\n\nfunction Row({title, fetchUrl, isLargeRow = false}) {\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  const base_url = 'https://image.tmdb.org/t/p/original/';\n\n  //useEffect dependent on the variable fetchUrl\n  useEffect(() => {\n    async function fetchData(){\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      console.log(request)\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl])\n\n  /* To show the trailers */\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n        autoplay: 1,\n    }\n  }\n\n  const handleClick = (movie) => {\n      if(trailerUrl){\n          setTrailerUrl(\"\");\n      } else {\n          movieTrailer(movie?.name || \"\")\n          .then((url) => {\n              const urlParams = new URLSearchParams(new URL(url).search);\n              setTrailerUrl(urlParams.get('v'));\n          })\n          .catch(() => console.log('Temporary Unavailable'))\n      }\n  }\n\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n\n          //This conditional statement prevents any deadlinks \n          //Only render image if isLargeRow and there is poster_path or if is not isLargerow and there is backdrop_path\n          ((isLargeRow && movie.poster_path) ||\n            (!isLargeRow && movie.backdrop_path)) && (\n            <img \n            onClick={()=>handleClick(movie)}\n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            key = {movie.id}\n            src={`${base_url}${\n              //if isLargeRow, use poster_path else backdrop_path\n              isLargeRow ? movie.poster_path : movie.backdrop_path}`\n            } \n            alt={movie.name}\n          />\n          )\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}