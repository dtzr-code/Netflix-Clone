{"ast":null,"code":"var _jsxFileName = \"/Users/dtzr/Documents/GitHub/netflix-clone/src/components/SearchRow.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./SearchRow.css\";\nimport axios from '../axios';\nimport YouTube from 'react-youtube';\n/* npm install --save youtube-api */\n\nimport { API_KEY } from '../Requests';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SearchRow({\n  title,\n  fetchUrl = false\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n  const base_url = 'https://image.tmdb.org/t/p/original'; //useEffect dependent on the variable fetchUrl\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  /* To show the trailers */\n\n  const opts = {\n    height: \"500\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  /* When the user clicked on the picture */\n\n  const handleClick = async movie => {\n    /* if the video is already open, close it by setting the setTrailerUrl to empty */\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      var _trailerurl$data$resu;\n\n      let trailerurl = await axios.get(`/movie/${movie.id}/videos?api_key=${API_KEY}`);\n      setTrailerUrl((_trailerurl$data$resu = trailerurl.data.results[0]) === null || _trailerurl$data$resu === void 0 ? void 0 : _trailerurl$data$resu.key);\n      /* To get the value of the id key*/\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"searchrow__container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"searchrow\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"searchrow__posters\",\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(\"img\", {\n          onClick: () => handleClick(movie),\n          className: \"searchrow__poster\",\n          src: `${base_url}${movie.backdrop_path}`,\n          alt: movie.name\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n        videoId: trailerUrl,\n        opts: opts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n}\n\n_s(SearchRow, \"zcdNe0Lr8rip4Oj/qSSLGY8Tl3o=\");\n\n_c = SearchRow;\nexport default SearchRow;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchRow\");","map":{"version":3,"sources":["/Users/dtzr/Documents/GitHub/netflix-clone/src/components/SearchRow.js"],"names":["React","useEffect","useState","axios","YouTube","API_KEY","SearchRow","title","fetchUrl","movies","setMovies","trailerUrl","setTrailerUrl","base_url","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","movie","trailerurl","id","key","map","backdrop_path","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,iBAAP;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,eAApB;AAAqC;;AACrC,SAAQC,OAAR,QAAsB,aAAtB;;;AAEA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,KAAF;AAASC,EAAAA,QAAQ,GAAG;AAApB,CAAnB,EAA+C;AAAA;;AAE7C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEA,QAAMW,QAAQ,GAAG,qCAAjB,CAL6C,CAO7C;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAea,SAAf,GAA0B;AACxB,YAAMC,OAAO,GAAG,MAAMZ,KAAK,CAACa,GAAN,CAAUR,QAAV,CAAtB;AACAE,MAAAA,SAAS,CAACK,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACN,QAAD,CAPM,CAAT;AASA;;AACA,QAAMW,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACRC,MAAAA,QAAQ,EAAE;AADF;AAHD,GAAb;AAQA;;AACA,QAAMC,WAAW,GAAG,MAAOC,KAAP,IAAiB;AACnC;AACA,QAAId,UAAJ,EAAgB;AACdC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAFD,MAEO;AAAA;;AACL,UAAIc,UAAU,GAAG,MAAMvB,KAAK,CAACa,GAAN,CACpB,UAASS,KAAK,CAACE,EAAG,mBAAkBtB,OAAQ,EADxB,CAAvB;AAGAO,MAAAA,aAAa,0BAACc,UAAU,CAACT,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,CAAD,0DAAC,sBAA4BU,GAA7B,CAAb;AAAiD;AAClD;AACF,GAVD;;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA,2BACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACA;AAAA,kBAAKrB;AAAL;AAAA;AAAA;AAAA;AAAA,cADA,eAGA;AAAK,QAAA,SAAS,EAAC,oBAAf;AAAA,kBACKE,MAAM,CAACoB,GAAP,CAAYJ,KAAD,iBACR;AACI,UAAA,OAAO,EAAE,MAAID,WAAW,CAACC,KAAD,CAD5B;AAEI,UAAA,SAAS,EAAC,mBAFd;AAII,UAAA,GAAG,EAAG,GAAEZ,QAAS,GAAEY,KAAK,CAACK,aAAc,EAJ3C;AAKI,UAAA,GAAG,EAAEL,KAAK,CAACM;AALf,WAGWN,KAAK,CAACE,EAHjB;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cAHA,EAiBChB,UAAU,iBAAI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAEA,UAAlB;AAA8B,QAAA,IAAI,EAAEQ;AAApC;AAAA;AAAA;AAAA;AAAA,cAjBf;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADJ;AAuBD;;GA9DQb,S;;KAAAA,S;AAgET,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport \"./SearchRow.css\"\nimport axios from '../axios'\nimport YouTube from 'react-youtube'; /* npm install --save youtube-api */\nimport {API_KEY} from '../Requests'\n\nfunction SearchRow({ title, fetchUrl = false}) {\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState('');\n\n  const base_url = 'https://image.tmdb.org/t/p/original';\n\n  //useEffect dependent on the variable fetchUrl\n  useEffect(() => {\n    async function fetchData(){\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl])\n\n  /* To show the trailers */\n  const opts = {\n    height: \"500\",\n    width: \"100%\",\n    playerVars: {\n        autoplay: 1,\n    }\n  }\n\n  /* When the user clicked on the picture */\n  const handleClick = async (movie) => {\n    /* if the video is already open, close it by setting the setTrailerUrl to empty */\n    if (trailerUrl) {\n      setTrailerUrl(\"\");\n    } else {\n      let trailerurl = await axios.get(\n        `/movie/${movie.id}/videos?api_key=${API_KEY}`\n      );\n      setTrailerUrl(trailerurl.data.results[0]?.key);  /* To get the value of the id key*/\n    }\n  };\n    \n  return (\n      <div className=\"searchrow__container\">\n        <div className=\"searchrow\">\n        <h2>{title}</h2>\n\n        <div className=\"searchrow__posters\">\n            {movies.map((movie) => (\n                <img \n                    onClick={()=>handleClick(movie)}\n                    className=\"searchrow__poster\"\n                    key = {movie.id}\n                    src={`${base_url}${movie.backdrop_path}`} \n                    alt={movie.name}\n                />\n            )\n            )}\n        </div>\n        \n        {/* Only when trailerUrl exists then play youtube video */}\n        {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\n        </div>\n    </div>\n  )\n}\n\nexport default SearchRow\n"]},"metadata":{},"sourceType":"module"}