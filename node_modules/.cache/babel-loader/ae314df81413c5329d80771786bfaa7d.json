{"ast":null,"code":"var _jsxFileName = \"/Users/dtzr/Desktop/Programming languages/ReactJS/Projects/netflix/netflix2 /src/Row.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport \"./Row.css\";\nimport axios from './axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Row({\n  title,\n  fetchUrl,\n  isLargeRow = false\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const base_url = \"https://image.tmdb.org/t/p/original/\"; //useEffect dependent on the variable fetchUrl\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [fetchUrl]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row__posters\",\n      children: movies.map(movie => //This conditional statement prevents any deadlinks \n      //Only render image if isLargeRow and there is poster_path or if is not isLargerow \n      isLargeRow && movie.poster_path || !isLargeRow && movie.backdrop_path && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: `row__poster ${isLargeRow && \"row__posterLarge\"}`,\n        src: `${base_url}${//if isLargeRow, use poster_path else backdrop_path\n        isLargeRow ? movie.poster_path : movie.backdrop_path}`,\n        alt: movie.name\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Row, \"MO6b3PSP3RIUqZ8gtSrBZBVtBbs=\");\n\n_c = Row;\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["/Users/dtzr/Desktop/Programming languages/ReactJS/Projects/netflix/netflix2 /src/Row.js"],"names":["React","useEffect","useState","axios","Row","title","fetchUrl","isLargeRow","movies","setMovies","base_url","fetchData","request","get","data","results","map","movie","poster_path","backdrop_path","name","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,SAAlB;;;AAEA,SAASC,GAAT,CAAa;AAACC,EAAAA,KAAD;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,UAAU,GAAG;AAA/B,CAAb,EAAoD;AAAA;;AAElD,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMQ,QAAQ,GAAG,sCAAjB,CAJkD,CAMlD;;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeU,SAAf,GAA0B;AACxB,YAAMC,OAAO,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUP,QAAV,CAAtB;AACAG,MAAAA,SAAS,CAACG,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACL,QAAD,CAPM,CAAT;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE;AAAA,gBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,YADF,eAGE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,gBACGG,MAAM,CAACQ,GAAP,CAAYC,KAAD,IAEV;AACA;AACAV,MAAAA,UAAU,IAAIU,KAAK,CAACC,WAApB,IACA,CAACX,UAAD,IAAeU,KAAK,CAACE,aAArB,iBACE;AACA,QAAA,SAAS,EAAG,eAAcZ,UAAU,IAAI,kBAAmB,EAD3D;AAGA,QAAA,GAAG,EAAG,GAAEG,QAAS,GACjB;AACAH,QAAAA,UAAU,GAAGU,KAAK,CAACC,WAAT,GAAuBD,KAAK,CAACE,aAAc,EALrD;AAMA,QAAA,GAAG,EAAEF,KAAK,CAACG;AANX,SAEOH,KAAK,CAACI,EAFb;AAAA;AAAA;AAAA;AAAA,cANH;AADH;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAxCQjB,G;;KAAAA,G;AA0CT,eAAeA,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport \"./Row.css\"\nimport axios from './axios'\n\nfunction Row({title, fetchUrl, isLargeRow = false}) {\n\n  const [movies, setMovies] = useState([]);\n\n  const base_url = \"https://image.tmdb.org/t/p/original/\";\n\n  //useEffect dependent on the variable fetchUrl\n  useEffect(() => {\n    async function fetchData(){\n      const request = await axios.get(fetchUrl);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [fetchUrl])\n\n  return (\n    <div className=\"row\">\n      <h2>{title}</h2>\n\n      <div className=\"row__posters\">\n        {movies.map((movie) => (\n\n          //This conditional statement prevents any deadlinks \n          //Only render image if isLargeRow and there is poster_path or if is not isLargerow \n          isLargeRow && movie.poster_path ||\n          !isLargeRow && movie.backdrop_path && (\n            <img \n            className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\n            key = {movie.id}\n            src={`${base_url}${\n            //if isLargeRow, use poster_path else backdrop_path\n            isLargeRow ? movie.poster_path : movie.backdrop_path}`} \n            alt={movie.name}\n          />\n          )\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Row\n"]},"metadata":{},"sourceType":"module"}